##################################
##### Common dimensions ##########
##################################

"""
This is a generic interface that represents an Ethereum address.
It allows to make queries that are not specific to a particular type of address.
"""
interface EvmAddress {
  "The account or contract address"
  id: Bytes!
}

"""
A token is a representation of a fungible asset on the blockchain
as specified by the ERC20 standard.
"""
type Token @entity(immutable: true) {
  # token address
  id: Bytes!

  "The token symbol"
  symbol: String
  "The token name"
  name: String
  "The number of decimals the token uses"
  decimals: BigInt!
}

"""
A transaction is a record of an event that happened on the blockchain.
Transactions are identified by their hash.
"""
type Transaction @entity(immutable: true) {
  "The transaction hash"
  id: Bytes!

  "The block number the transaction was included in"
  blockNumber: BigInt!
  "The timestamp of the block the transaction was included in"
  blockTimestamp: BigInt!

  "The sender of the transaction"
  sender: EvmAddress!

  "Gas fee paid for the transaction in the native token"
  gasFee: BigDecimal!
}

"""
A snapshot is a record of the state of the protocol at a specific point in time.
Snapshots are identified by their timestamp and period.
"""
interface Snapshot {
  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 1 day: 86400
  - 1 week: 604800
  - 1 year: 31536000
  """
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!
}

"""
A clock tick is a record of time passing.
This is used to update the protocol's stats at regular intervals.
"""
type ClockTick @entity(immutable: true) {
  "truncated timestamp + tick period"
  id: Bytes!

  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 15 minutes: 900
  - 1 day: 86400
  """
  period: BigInt!
  "Timestamp the tick was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp tick was initiated at"
  timestamp: BigInt!
}

#########################
##### Protocol Data #####
#########################

"""
The Protocol entity is the main entity of the Beefy Finance subgraph.
It represents the Beefy Finance protocol.
This is where all stats and data about the protocol is stored.
"""
type Protocol @entity {
  """
  The protocol identifier:
  - 1: BeefyCL
  """
  id: Bytes!

  "Protocol name"
  name: String!

  "The current TVL in the protocol in USD"
  totalValueLockedUSD: BigDecimal!
  "The current number of active vaults in the protocol"
  activeVaultCount: Int!
  "The current number of invested investors in the protocol"
  activeInvestorCount: Int!

  "The number of transactions that ever happened in the protocol"
  cumulativeTransactionCount: Int!
  "The number of transactions initiated by investors that ever happened in the protocol"
  cumulativeInvestorInteractionsCount: Int!
  "The total number of harvests that ever happened in the protocol"
  cumulativeHarvestCount: Int!

  "A timeseries of the protocol's stats"
  snapshots: [ProtocolSnapshot!]! @derivedFrom(field: "protocol")

  "All vaults in the protocol"
  vaults: [BeefyCLVault!]! @derivedFrom(field: "protocol")
}

"""
A snapshot of the protocol's stats.
Any event that happens in the protocol is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, yearly.
"""
type ProtocolSnapshot implements Snapshot @entity {
  "protocol.id + period + timestamp"
  id: Bytes!

  "The protocol the snapshot is for"
  protocol: Protocol!

  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 1 day: 86400
  - 1 week: 604800
  - 1 year: 31536000
  """
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "Value locked in the protocol in USD at the time of the snapshot"
  totalValueLockedUSD: BigDecimal!

  "Number of vaults in the protocol at the time of the snapshot"
  activeVaultCount: Int!
  "Number of investors that interacted with the protocol at the time of the snapshot"
  uniqueActiveInvestorCount: Int!
  "Number of investors interacting with the protocol for the first time at the time of the snapsho"
  newInvestorCount: Int!

  "Total number of transactions in the protocol at the time of the snapshot"
  transactionCount: Int!
  "Number of transactions initiated by investors at the time of the snapshot"
  investorInteractionsCount: Int!
  "Number of transactions initiated by harvesters at the time of the snapshot"
  harvesterTransactionsCount: Int!

  "Total amount of gas spent by anyone at the time of the snapshot"
  totalGasSpent: BigDecimal!
  "Total amount of gas spent by anyone in USD at the time of the snapshot"
  totalGasSpentUSD: BigDecimal!
  "Total amount of gas spent by investors at the time of the snapshot"
  investorGasSpent: BigDecimal!
  "Total amount of gas spent by investors in USD at the time of the snapshot"
  investorGasSpentUSD: BigDecimal!
  "Total amount of gas spent by harvesters at the time of the snapshot"
  harvesterGasSpent: BigDecimal!
  "Total amount of gas spent by harvesters in USD at the time of the snapshot"
  harvesterGasSpentUSD: BigDecimal!

  """
  Total amount of gas saved by the protocol at the time of the snapshot.
  Each time an harvest transaction is executed, this value is increased by the amount of gas saved.
  Gas saved is equal the the number of gas units that would have been spent if the transaction was executed on-chain
  by each investor instead of using the Beefy Finance protocol.
  It is expressed in native token.
  """
  protocolGasSaved: BigDecimal!
  "Total amount of gas saved by the protocol in USD at the time of the snapshot"
  protocolGasSavedUSD: BigDecimal!

  "Amount of fees collected by the protocol in the native token at the time of the snapshot"
  protocolFeesCollectedNative: BigDecimal!
  "Total amount of fees collected by the protocol in USD at the time of the snapshot"
  protocolFeesCollectedUSD: BigDecimal!

  "Harvest incentive fees collected by the protocol in the native token at the time of the snapshot"
  harvesterFeesCollectedNative: BigDecimal!
  "Total amount of harvest incentive fees collected by the protocol in USD at the time of the snapshot"
  harvesterFeesCollectedUSD: BigDecimal!

  "Strategist incentive fees collected by the protocol in the native token at the time of the snapshot"
  strategistFeesCollectedNative: BigDecimal!
  "Total amount of strategist incentive fees collected by the protocol in USD at the time of the snapshot"
  strategistFeesCollectedUSD: BigDecimal!

  "Zap fees collected by the protocol in the native token at the time of the snapshot"
  zapFeesCollectedNative: BigDecimal!
  "Total amount of zap fees collected by the protocol in USD at the time of the snapshot"
  zapFeesCollectedUSD: BigDecimal!
}

#############################
##### CL Vault Contracts ####
#############################

enum VaultLifecycle {
  "The vault is in the process of being initialized"
  INITIALIZING
  "The vault is able to accept deposits and earn yield"
  RUNNING
  "A vault can be paused for a variety of reasons, this is always to protect investors funds"
  PAUSED
}

type BeefyCLVault implements EvmAddress @entity {
  "The vault address"
  id: Bytes!

  "Protocol the vault belongs to"
  protocol: Protocol!

  "The transaction that created the vault"
  createdWith: Transaction!

  "Current owner of the vault. The owner has additional permissions to manage the vault."
  owner: Bytes!
  "The token data of the vault. The vault is also an ERC20 token. This tokens represents the shares of the vault."
  sharesToken: Token!
  "The strategy of the vault. The strategy is responsible for managing the vault's assets."
  strategy: BeefyCLStrategy!

  "Technical field to remember if the vault was already initialized"
  isInitialized: Boolean!

  "The current lifecycle status of the vault"
  lifecycle: VaultLifecycle!

  "The underlying tokens contained in the vault. This is the first token."
  underlyingToken0: Token!
  "The underlying tokens contained in the vault. This is the second token."
  underlyingToken1: Token!

  """
  The current price of the token zero expressed as a token1 value.
  For example, if the vault is a BTC/ETH vault, this is the price of 1 BTC in ETH
  """
  currentPriceOfToken0InToken1: BigDecimal!

  "Price range start this vault is currently configured to operate in"
  priceRangeMin1: BigDecimal!
  "Price range end this vault is currently configured to operate in"
  priceRangeMax1: BigDecimal!
  "Price range start this vault is currently configured to operate in in USD"
  priceRangeMin1USD: BigDecimal!
  "Price range end this vault is currently configured to operate in in USD"
  priceRangeMax1USD: BigDecimal!

  "Amount of underlying tokens in the vault. This is the first token."
  underlyingAmount0: BigDecimal!
  "Amount of underlying tokens in the vault. This is the second token."
  underlyingAmount1: BigDecimal!
  "Amount of underlying tokens in the vault in USD. This is the first token."
  underlyingAmount0USD: BigDecimal!
  "Amount of underlying tokens in the vault in USD. This is the second token."
  underlyingAmount1USD: BigDecimal!
  "The current TVL in the vault in USD"
  totalValueLockedUSD: BigDecimal!

  "Total count of harvests for that vault"
  cumulativeHarvestCount: Int!
  "Deposit count for that vault"
  cumulativeDepositCount: Int!
  "Withdraw count for that vault"
  cumulativeWithdrawCount: Int!
  "Transfer count for that vault"
  cumulativeTransferCount: Int!

  "The harvested amount of the first token"
  cumulativeHarvestedAmount0: BigDecimal!
  "The harvested amount of the second token"
  cumulativeHarvestedAmount1: BigDecimal!
  "The harvested amount of the first token in USD"
  cumulativeHarvestedAmount0USD: BigDecimal!
  "The harvested amount of the second token in USD"
  cumulativeHarvestedAmount1USD: BigDecimal!
  "The harvested amount in USD"
  cumulativeHarvestValueUSD: BigDecimal!

  "Amount of native token charged as call fee incentive"
  cumulativeHarvesterFeeCollectedNative: BigDecimal!
  "Amount of native token charged as protocol fee"
  cumulativeProtocolFeeCollectedNative: BigDecimal!
  "Amount of native token charged as strategist fee incentive"
  cumulativeStrategistFeeCollectedNative: BigDecimal!

  "Amount of native token charged as call fee incentive in USD"
  cumulativeHarvesterFeeCollectedUSD: BigDecimal!
  "Amount of native token charged as protocol fee in USD"
  cumulativeProtocolFeeCollectedUSD: BigDecimal!
  "Amount of native token charged as strategist fee incentive in USD"
  cumulativeStrategistFeeCollectedUSD: BigDecimal!

  "All investors positions in the vault"
  positions: [InvestorPosition!]! @derivedFrom(field: "vault")

  "All harvests of this vault"
  harvests: [BeefyCLVaultHarvestEvent!]! @derivedFrom(field: "vault")

  "Snapshot of the vault's stats"
  snapshots: [BeefyCLVaultSnapshot!]! @derivedFrom(field: "vault")
}

"""
A snapshot of the vault's stats.
Any event that happens in the vault is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, yearly.
"""
type BeefyCLVaultSnapshot implements Snapshot @entity {
  "vault.id + period + timestamp"
  id: Bytes!

  "The vault the snapshot is for"
  vault: BeefyCLVault!

  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 1 day: 86400
  - 1 week: 604800
  - 1 year: 31536000
  """
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  """
  The current price of the token zero expressed as a token1 value.
  For example, if the vault is a BTC/ETH vault, this is the price of 1 BTC in ETH
  """
  currentPriceOfToken0InToken1: BigDecimal!

  "Price range start this vault is currently configured to operate in"
  priceRangeMin1: BigDecimal!
  "Price range end this vault is currently configured to operate in"
  priceRangeMax1: BigDecimal!
  "Price range start this vault is currently configured to operate in in USD"
  priceRangeMin1USD: BigDecimal!
  "Price range end this vault is currently configured to operate in in USD"
  priceRangeMax1USD: BigDecimal!

  "Amount of underlying tokens in the vault. This is the first token."
  underlyingAmount0: BigDecimal!
  "Amount of underlying tokens in the vault. This is the second token."
  underlyingAmount1: BigDecimal!

  "Amount of underlying tokens in the vault in USD. This is the first token."
  underlyingAmount0USD: BigDecimal!
  "Amount of underlying tokens in the vault in USD. This is the second token."
  underlyingAmount1USD: BigDecimal!

  "The current TVL in the vault in USD"
  totalValueLockedUSD: BigDecimal!

  "Total count of harvests for that vault"
  harvestCount: Int!
  "Deposit count for that vault"
  depositCount: Int!
  "Withdraw count for that vault"
  withdrawCount: Int!
  "Transfer count for that vault"
  transferCount: Int!

  "The harvested amount of the first token"
  harvestedAmount0: BigDecimal!
  "The harvested amount of the second token"
  harvestedAmount1: BigDecimal!
  "The harvested amount of the first token in USD"
  harvestedAmount0USD: BigDecimal!
  "The harvested amount of the second token in USD"
  harvestedAmount1USD: BigDecimal!
  "The harvested amount in USD"
  harvestValueUSD: BigDecimal!

  "Amount of native token charged as call fee incentive"
  harvesterFeeCollectedNative: BigDecimal!
  "Amount of native token charged as protocol fee"
  protocolFeeCollectedNative: BigDecimal!
  "Amount of native token charged as strategist fee incentive"
  strategistFeeCollectedNative: BigDecimal!

  "Amount of native token charged as call fee incentive in USD"
  harvesterFeeCollectedUSD: BigDecimal!
  "Amount of native token charged as protocol fee in USD"
  protocolFeeCollectedUSD: BigDecimal!
  "Amount of native token charged as strategist fee incentive in USD"
  strategistFeeCollectedUSD: BigDecimal!
}

"""
A strategy is a contract that manages the assets of a vault.
This is mostly used to start tracking the events and link them to the vault on new event
"""
type BeefyCLStrategy implements EvmAddress @entity {
  "The strategy address"
  id: Bytes!

  "The vault the strategy is managing"
  vault: BeefyCLVault!

  "The owner of the strategy. The owner has additional permissions to manage the strategy."
  owner: Bytes!

  "Technical field to remember if the strategy was already initialized"
  isInitialized: Boolean!

  "All harvests of the strategy"
  harvests: [BeefyCLVaultHarvestEvent!]! @derivedFrom(field: "strategy")
}

"""
Vault are harvested by the strategy. This event is emitted when the strategy harvests the vault.
"""
type BeefyCLVaultHarvestEvent @entity(immutable: true) {
  "transaction hash + log index"
  id: Bytes!

  "The vault the harvest event is for"
  vault: BeefyCLVault!
  "The strategy that harvested the vault"
  strategy: BeefyCLStrategy!

  "The transaction that created the vault harvest event"
  createdWith: Transaction!

  "The timestamp of the harvest event so you can sort by time"
  timestamp: BigInt!

  "The amount of first underlying tokens harvested"
  harvestedAmount0: BigDecimal!
  "The amount of second underlying tokens harvested"
  harvestedAmount1: BigDecimal!

  "The amount of first underlying tokens harvested in USD"
  harvestedAmount0USD: BigDecimal!
  "The amount of second underlying tokens harvested in USD"
  harvestedAmount1USD: BigDecimal!

  "Total usd value of the harvest"
  harvestValueUSD: BigDecimal!

  "The vault's balance of token0 at time of harvest"
  underlyingBalance0: BigDecimal!
  "The vault's balance of token1 at time of harvest"
  underlyingBalance1: BigDecimal!
}

#######################
##### CL Incentive ####
#######################

"""
A vault incentive is a reward given to the investors of a vault.
The reward is given in a dedicated incentive token during a set period of time.
This is most commonly referred to as a "boost".
"""
type BeefyVaultIncentive implements EvmAddress @entity {
  "The inventive contract address"
  id: Bytes!

  "The vault the incentive is for"
  vault: BeefyCLVault!

  "The transaction that created the vault incentive"
  createdWith: Transaction!

  "The token used for the incentive"
  incentiveRewardedIn: Token!

  "Amount of incentive tokens left to be distributed"
  incentiveAmount: BigDecimal!

  "The amount of incentive tokens distributed so far"
  claimedAmount: BigDecimal!
  "Amount of incentive tokens distributed so far in USD"
  claimedAmountUSD: BigDecimal!

  "All claims of the vault incentive"
  claims: [BeefyVaultIncentiveClaimEvent!]! @derivedFrom(field: "vaultIncentive")
}

"""
A vault incentive claim is a record of an investor claiming a vault incentive.
As incentives are time-released, investors can claim their share of the incentive at any time.
"""
type BeefyVaultIncentiveClaimEvent @entity(immutable: true) {
  "transaction hash + log index"
  id: Bytes!

  "The vault incentive the claim is for"
  vaultIncentive: BeefyVaultIncentive!

  "The investor that claimed the incentive"
  investor: Investor!

  "The transaction that created the vault incentive claim"
  createdWith: Transaction!

  "The amount of incentive tokens claimed"
  claimedAmount: BigDecimal!
}

############################
##### Investor Position ####
############################

type Investor implements EvmAddress @entity {
  "The investor address"
  id: Bytes!

  "Number of active positions the investor has in the protocol"
  activePositionCount: Int!

  "Total amount of seconds the investor has been invested in the protocol before fully exiting"
  closedInvestmentDuration: BigInt!

  "The timestamp the investor's current investment was opened or re-opened at. Zero if the position is closed."
  currentInvestmentOpenAtTimestamp: BigInt!

  "The date of the last interaction with the protocol. Used to calculate daily active users."
  lastInteractionAt: BigInt!

  "Current position value in USD as the sum of all the investor ongoing positions"
  totalPositionValueUSD: BigDecimal!

  "Sum of the investor total positions value at the end of the day for the last 30 days in USD divided by the number of active days"
  averageDailyTotalPositionValueUSD30D: BigDecimal!

  "The last daily total position values in USD for the last 30 days. Most recent last."
  last30DailyTotalPositionValuesUSD: [BigDecimal!]!

  "The transactions count that the investor was the sender of"
  cumulativeInteractionsCount: Int!

  "All deposits of the investor"
  cumulativeDepositCount: Int!

  "All withdraws of the investor"
  cumulativeWithdrawCount: Int!

  "All investor beefy positions"
  positions: [InvestorPosition!]! @derivedFrom(field: "investor")

  "All investor snapshots"
  snapshots: [InvestorSnapshot!]! @derivedFrom(field: "investor")
}

"""
A snapshot of the investor's stats.
Any event that happens in the investor's position is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, yearly.
"""
type InvestorSnapshot implements Snapshot @entity {
  "investor.id + period + timestamp"
  id: Bytes!

  "The investor the snapshot is for"
  investor: Investor!

  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 1 day: 86400
  - 1 week: 604800
  - 1 year: 31536000
  """
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "Position value in USD as the sum of all the investor ongoing positions at the time of the snapshot"
  totalPositionValueUSD: BigDecimal!

  "Interactions count for the investor at the time of the snapshot"
  interactionsCount: Int!

  "Deposits count for the investor at the time of the snapshot"
  depositCount: Int!

  "Withdraws count for the investor at the time of the snapshot"
  withdrawCount: Int!
}

"""
An investor position is a record of an investor's position in a vault.
"""
type InvestorPosition @entity {
  "Vault address + investor address"
  id: Bytes!

  "The vault the investor has a position in"
  vault: BeefyCLVault!
  "The investor that has a position in the vault"
  investor: Investor!
  "The transaction that created the investor position"
  createdWith: Transaction!

  "Amount of seconds the investor has been invested in this position before fully exiting"
  closedPositionDuration: BigInt!

  "The timestamp the investor's current position was opened or re-opened at. Zero if the position is closed."
  positionOpenAtTimestamp: BigInt!

  "The amount of shares the investor holds"
  sharesBalance: BigDecimal!

  "The amount of first underlying tokens the investor is entitled to"
  underlyingBalance0: BigDecimal!
  "The amount of second underlying tokens the investor is entitled to"
  underlyingBalance1: BigDecimal!

  "The amount of first underlying tokens the investor is entitled to in USD"
  underlyingBalance0USD: BigDecimal!
  "The amount of second underlying tokens the investor is entitled to in USD"
  underlyingBalance1USD: BigDecimal!

  "Current position value in USD"
  positionValueUSD: BigDecimal!

  "Sum of the daily position value for the last 30 days in USD divided by the number of active days"
  averageDailyPositionValueUSD30D: BigDecimal!

  "The last daily position values in USD for the last 30 days. Most recent last."
  last30DailyPositionValuesUSD: [BigDecimal!]!

  "All investor position snapshots"
  snapshots: [InvestorPositionSnapshot!]! @derivedFrom(field: "investorPosition")
}

"""
A snapshot of the investor's position in a vault.
Any event that happens in the investor's position is recorded in a snapshot.
We keep multiple snapshots time frames as noted by the "period" field.
Snapshots include: daily, weekly, yearly.
"""
type InvestorPositionSnapshot implements Snapshot @entity {
  "investorPosition.id + period + timestamp"
  id: Bytes!

  "The investor position the snapshot is for"
  investorPosition: InvestorPosition!

  """
  Duration of the snapshot period in seconds.
  Available periods:
  - 1 day: 86400
  - 1 week: 604800
  - 1 year: 31536000
  """
  period: BigInt!
  "Timestamp the snapshot was initiated at, rounded to period"
  roundedTimestamp: BigInt!
  "Actual timestamp snapshot was initiated at"
  timestamp: BigInt!

  "The amount of shares the investor holds"
  sharesBalance: BigDecimal!

  "The amount of first underlying tokens the investor is entitled to"
  underlyingBalance0: BigDecimal!
  "The amount of second underlying tokens the investor is entitled to"
  underlyingBalance1: BigDecimal!

  "The amount of first underlying tokens the investor is entitled to in USD"
  underlyingBalance0USD: BigDecimal!
  "The amount of second underlying tokens the investor is entitled to in USD"
  underlyingBalance1USD: BigDecimal!

  "Current position value in USD"
  positionValueUSD: BigDecimal!
}
